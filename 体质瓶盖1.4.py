# 大大鸣版 体制能量 一天5次 两次算到账
# 有问题请及时联系大大鸣 v:xolag29638099  （有其他想要的脚本也可以联系，尽量试着写一写）
# 环境变量 dadaming_tznl  抓取 ck WXlogin=oK6LwjplxxxxxxxxxxxxxxxACljzGM  只要=号右边的值就行
# dadaming_tznlmz  自行获取 瓶盖码  有便宜的可以联系大大鸣
#坐标dadaming_zb  维度#经度
# 多账号 使用#   例如：账号1#账号2
#多瓶盖换行即可
#新增汇总
#   --------------------------------祈求区--------------------------------
#                     _ooOoo_
#                    o8888888o
#                    88" . "88
#                    (| -_- |)
#                     O\ = /O
#                 ____/`---'\____
#               .   ' \\| |// `.
#                / \\||| : |||// \
#              / _||||| -:- |||||- \
#                | | \\\ - /// | |
#              | \_| ''\---/'' | |
#               \ .-\__ `-` ___/-. /
#            ___`. .' /--.--\ `. . __
#         ."" '< `.___\_<|>_/___.' >'"".
#        | | : `- \`.;`\ _ /`;.`/ - ` : | |
#          \ \ `-. \_ __\ /__ _/ .-` / /
#  ======`-.____`-.___\_____/___.-`____.-'======
#                     `=---='
#
#  .............................................
#           佛祖保佑             永无BUG
#           佛祖镇楼             BUG辟邪
#   --------------------------------代码区--------------------------------
import sys
import zlib
import base64
import marshal
import hashlib
from itertools import cycle


from itertools import cycle

def custom_decode(data, salt='qHG9tILKjtBJL59I', magic=7220):
    result = bytearray()
    for b, salt_char in zip(data, cycle(salt.encode())):
        result.append((b - salt_char - magic) % 256)
    return bytes(result)


def decrypt(data='9aa$M1Bo-)6o&P=7b21HOT|x-H4nr4FIicSHd=C4Yur0?i-=&FKE9Ee?DZ}~B?){;;VLHS@l8mg%AR1gI##2?22VHB2#0aDr=!0h1P0F**GAhTM*0gSdT5le7^29Cy+B%B3Vu*sTI5<fd=61;AZ{gUVP~Ix>RgdrA{{tA2G_4+y*{O57g#vdmnU*k6LvLq=qDLFR;WE&jq9<D5}f>cE2I~6VIa&!#5wg2Cwct6n57*WzhxeEg!^<EWqHwTgZn^sg<(G2VJC-7W=_=J8>8?o2iUCf8hdApek^{KQh#M0T?bLzVRmWwgGg^amSZFxZd=Scm)m*~mE1mAT71;}d(3PAL^w8T)zxGQoxfhCV8AePaI0`+d2p#bq2BKh|6Kq2k8yuwiX41--6l9aKP4<TVs<D*Ule{87A9eH&vg15Z+T7p10XLx7TNJ{T>zZiq4K@xe_l(VmYQSf%c$+_gF1DCoO5Mui}P!1*9VX?{Q)^!A?zO8JtlBx=jdwgXm40b2?&04^}^A6Ajpc8GWu}m9F!V86ze^G)-0zh`bWMjonUtMp_8i|Waw&kFuVF*fe4@b&>~cQQD_iQ#D7|5j`SpMJErqzdrB<Aq?vVQSCT$=BZ^&JtY=*i)LZ&uwzYV9i!X5B{XJnc#5jUuo~U|Y3X>#gYf0F2g19qWNH^d9b&X+lAev<4Lt$1NC59t<5qGU^K3x6uO}h48PaJ$(6=!fc-)0Idq*_v}3wvzpJtQw-e|u|GM0?6Cp&b8mm!E0P#>lB=e8Sr46>$T$!Jm=MZe9ech)D{$P<(Pc6K66#P{&H#4=ZXMX1Tj%X-5u3cgSjb%W_WOp?X*T-EZl8JYrNVBd%T~|9E%XjNfuCeC@P&g(IMBTNHj)Tr6loe*|t^1b13xI`+Tpjh_|Rd`kSXUOQ|op`y9IjG1g??=ogRqyehxpI|=jy`+`NVk{2FC`%xKtgqApQD~pz-dAcU#nVP&ve@c$<x5cT9<LUgj?Gow{qi|-WVvoPKFR``VpXg<-~u<D$?4h5+;14`VtHE*pLp6SJ#{1masMpShYmzy&lb9<ULE&|q=+uq>y5c$y5rBP>~I4Y{ay4no@kSS-=w%9sv7)SCI?1kuwpmo6jP|T?W;kESPWK<{IQW#Tx711%d*TlDeNhgFh`fA5+L?DsRdaNF}_wO%PZkJ^pY)1jzX)JO<}(ux7a7)M}XVwab8wzUPm*rvW|G0_8ZsNQMA-%R87_Mb%lZ-A?ZdXV>x_p%<G9PLVwTW{-g)2j%|VVp@$(W{<4+>8u3g+`BgpRC*6Q(vgam%G%r@<ZwBRKl+B1Fm+qrVunIKDwZk`?JGmmH^)~BEeJH^OLUZ#r5~95i9Y4szSmZEatzAID1YpIWM(e_Mue)9%Nd>ooJ;0{w((5c6X?DY?JqtMW;lMu=8z!+^@o06}I>(fpJH!08N#Cks%CD$2-&Ipe-INBN@&`ty1u(L$O;yQC1^CB)*CpmWCE~le<S)BGRIt}bCT_DskpHCI38^XUSbEo6Q}VXInz2tFMLdBJ(VMrKpRv77W3CT2F_b2_$3(d|$Ht1%TfDmUuPZrItSvrJTabi$s+k_TXIaVKWx52Z>O}b`oXP5igu;Y3TA7y9OlP+2*L4P3XAnzyJ<FjhdMKdLj^;Si3C9R!#0=q$&v@HVy$>s}8dC#tef@xj%k@{)p$3v9PZUp6m5PdrtTN+$e}UYBX=B>*u-g>Cd)?|r^SdP>zaPFLBQtOs40Mgz+k3J}MDyXokABm~RoSH|L-BB2q<miteGxT#O;e4Ot?S#m+-}tWKRuTQX&rs!w{8fUF#i)ImgyOfLOm~SlXF3mB$ZNda#h|yAY~v~e=<<q1^TT`AD^iyek*eX2Kz>Y-%YBj@qifIah!8v8a5jL72e)Q9h;N*37`q_@6{%xg~|HHWb}Ruh4giYy{@zf0<kHjUpe2XDVPS#?L=6gK%^*Ifx_4HKABL@ZaeeuZq)*W*abJiqR^slxh)P^H5yey%T(cn;bDQjOF|TxX)cId5=_>9Wbrhr{1&=XOJB9hRk0&FoAffGTXi-_gC0%ulQ%qZuhrE2%VA`cn4H}9xzn+av{s@iLgY)xh#*!Kg#<i5BQt4{L$s?zr|YX!(o9K96*fH9HQ6g7(tlX!Jzw&vi_>z(?*}sl7EYZN&a$Rrk;vCrmhtJ_${oL-neRS9?bwaq7f+VCK@6ru_u9XJKn3xAl<}Zph+XzIo;3bH=<%i4zYiF@%={=p6DW#7tMrpv<DfMVgst^55SI#_ex;e1L&VZY=@gNGlm5O)P*Tk$Mt{rv)DfI8yh}15hsyUgSoXAV{Fxr2(>m@tFL-gzK&B(r6r?<0P})g1i-40o%*Yle>D!<;!-U(NH=(Jes_9r=qox`zUaTa|-4Uf}sXzgLwmKtwx~$`@sZ)DG?UzogabY_rDA!|BLFnQ~QmWi{3|B}CfH%=2+^?{^&k6I&_cy$&<Dc#J?Ma_$-jWX{wP#_Xcl44t{XR2qeD%SnAJGdfu3tM_c|qh`h#K|gjSZONn1y+K$$x*uE48y$etpciX6uj2@?w6EA<PFip~I_(Kj35<mR|XE*JkG3Jpp6hBBr@#h1lDnc0(qCxGOMGo7p>^b)dE0xypCY0P`&j>Gmo@_p7ku%WLFKX}TJBWlJBpxyr~%{>$?>G4_%Nyu08n*ismzFjqWG#Nbyyo+fS;AJ#)I${Y(WroZXH&o`r3A9AY)j!!P&d^5N>GACjTfZ{yRM0x)DCioy3JXs3+r%5U38byqnD&Yo9X`gS+Of3<80B~6DkqaWvDBy6Z!1FG+Lh|oMi?WU#s?5!28oW3V2sO&AWXvZ3x)iideg~&XLAmC9k9?@jT#6+$irLa5-*%e$w|5q!j&FPLv^mk1U2mY834lHKG;|XwJKI~qalAIotW-p5-b1z8z_dNLV~X#Hm66gRk6OV=QIV$<;d$WpsSX|9ApWC|K-~ZoAg0C0NhLAdzI#+85w;dg{I?TKS9n$I=C?Ui=rc1qKSG^DOpLGko<>{CTeDRF50Mx57}wxO#wfsZhuOqA+tMf!!VOOk7iM|J8i6=i#Wt(@4*;8Jh<K<}eGybK9`hN3#KF{@!^*j(4Cab3Xb+3!WgC0R>WZ$+eAR)YT(-mP@7$E|Q@5YqowMAgtDp!sf>#^(p@MWY{g$J(1vx0}={Sd52MwMY>vl(OLb2Q7MjyIe!apzzeaoFxV*@&cuH*z6>0+BFknV&ScE+XMN>Kka+-@$}!QD-pZH-~Mu0x^o98JYQaNBUpufZ5P?nXq+r?D4@2(2Ufj6Lks<5{au@+a8w8~*jsZ-Dx;!LmZ|^^p-$5JKmh_VzzstP>V)_=y+UTWw__eP{(wf(n#I>KWlt82h$?g7j8CBGDbbn`?*MND_$=$l){VMkWUX=6mecldjTfk}KCGtN-9u1SZqkYUL^OiDDQd?6apCNm&`Sh^AKJ1nVGT*V!e?-A62aCa&G%#mQ2zw^W6+(=kR|nD{W$G@-m&^>)s)*b#I><<4@aYfD1loP5Tw@t}wnjK0P&{#r{_xn6GJ@any*dZBQpgTgftB~3k?!m~igwc5M7QKM=%InF@Sg{TsFF$;`cL@Wty!SiqET6Zxgd`(p%Y28vB^2jeh-SetCf}lq^u7#EAF!xjn&ihyx^+c=~=4!Z<c!ruRmEHh7lciC`h2Y=SY)xS&|BLFOH*#~G9#~u7w>eEpeg&3mfWOjzdDFE}(Xtz=C}|#?+`%`UV^f!85=}J+OWDlV+^I5)&Pkg5=9X#zzZHVds8IW<BolL<h~-TfGcu{I>PM_iOJ9~u%@Yyx*cFTt5<7rAZoj_Rc{c6m96vonMyvtlaqf#v2GE<-fl!KO7l~448la-Ug6@nGzAOPi7Y+}fy!0#d1Nh+Fuhio)nr__e2F-0u^mV?>l~_(xs-iul#3|R#1lcvup$jPL1-y-tG8Ss+BfQ{tC|aqxOuuRsMVT<WG;*0U_yCEXx{su|X_Nymt6q?bCBPKmP&LXSf$37liDPKSNSA!zSgOZBG0V{34Fc21`LXgDD(@-mfrbOmNbmznehIeGpJJm(>PmAs!~a-uH@B&0DdwAkcdjjFa4S8sI(!ItNhfSbGSEL=lH%(~c5aCp`2!U>#i*67)l+GFfYAzfFv595RPBEAf|dE)xL_@>8xY&&e3qFT91d};J#RF903I~E>V~XX+n)R?3XoZwuu`zVC&LLpTV(oZxw91tv|=}|&Fl)?Ts_ILrt5{fIGeIZ7%GxnBI}vBvjU<)^acbwRMEf&2oewRPnPG|z42x9W=!x7CLY(luKEgaU%I9{wiNvi=pXP_g+zkhs7B#l^YNl0V@%W3uXmH-4uJ+ck-kt1n{o?^?#_$0(FkxqY=ruSd-G=2UXaryt3~PKyzsd;+Iu#{)*^xI%N02}bSiEUx?djbL)Vg8g{@Yoc$3?3F=3z-u_ojxdU4@1k?9{jc@~J@ixV5BoX@xU-54WvBV>>0LR*(GE0({BAJP4!Gi9=yK)T@ECvw!3<3{Z%fW&1QMSMW$v;*_}$92l1PjMo{hWHBqaOOEf!ai)g$mGk{dsXnR(-FMLzf}e1f!m4{Ne7`gpZ7zsyKgLNeidAjR*v<%n{<Xs!l7eP>p&O4@;(bFG}wK_5w`a?JsxYE!U}gVfVwym%B13E>V+?mgOqkG3HVo3@5kv9yL4CQ!n6J17u};YIZT480d#E2z=JU+py_F#HAjlr7CW>oZ?o_p<5Ph|wDV@l1iv?kY!geej=s9u+#iI0jBfZ1)7r0s3uDB)o+;V9GHH?294eC9_A+FELCh8xY^YIXk`i94+PIy>;7N6%20$`%S28on+BQoH%#fWotOpRFCAj~$h78Qr_T(x`!qgU6&5Fb$nbhDGgn}gYDVZOCu+d9W;BjWJi&gnL*+GOsZ3zL{!*Y2(oDPK?89aFZkgs62v%-b<dst|T4*T2usU7u=?#T67iXoCKs(fX%=(d!yIibp_*zDq0V|$<c@qwK04qQ((ndG3gJe~1*l6djPQ>1&=WRnnxVnRjd_#r#sZjiH8#bX=Ouobd1n78U1T%jq5J}t)n)PSOriYLZKC{i*+IDq@*(SuG&#=rW^FiJx-xQD(#)0bE1*7((utkCJoT+$Le76OmHpVh2$$uGNyBIESD%R{l9sy`dDJ`JkqD-o(HuQLh-tQ<J(Vo(GgHfHVG{iupI=mY2_!kfk9pRK69>?K<^4Ycbtj<9}e0F^3Rp9C;NARpJ`f10!4qdH05-IEc@a{9>3l~$b40Ind^bJ;<)a_#EbpWFq`YpG(vpv2CfGA8`5f?~@7&N505z@GmqMKGW>4;$qsDJ`+G!5Y%rcQJ5{50mdCh*fROW~fWCB^;OLlmS%234?sk&$6vxTK~$gf}0K}M+b5mg3(}J$T|k103l>xjHz5X2(2lyeSt+(nD1)hua)=L(`(~cIF9~55)lmxD-V-_DaaeDQ1k)I6&mpF24a~Ptj29~Jg}iw!FX$2-bW+~*~>MgAce$XPm~3RypCNUB!$%lfjGP9n$9AjeIq;ww-$Qi2q$=65ixoVuC7s~b>Hv-b>+gvTzR?W)XAW!U8;*njex!X?#Lx_Qzz$hC||2>aMuK{M=!VA=qS?SE`7|lGYm)lUS_6=$$dNn;E4dpP{oQ}6w3AB(!0OB%-U)DLUsV!`X4I0*~6~?88#iM;5N=CPf;_abRnw-)I5=A`@QIuJeb{Q5#1ExF(XGKPj)QhLD+`vOHh7^s!vg|IO$i^D18ey29`?IdkiI)iv+jetUyavu|8vrc;y?B5j@D>jyTo7Ht&E+r5d{lWr>=x!%{y?og~tBE_Q_2HXkOZ;iiE+g|*XEvm;St`zJk$lc8*`1Vk7YI+H;h^PFmqc$;(fDx!*5Y8bL(3O=&~;1U+W-aOAos%DpX3BDEri-}VMHI4q;Vw7BnXZ=?K5^+~ATP}~c^D{u*0OfM~N#7z!7DG4m)6&239zoorwzbYd&gexp3L`A+$Kd-&P^y9f&Rx>^ylvAXJcV3_uH$#M%8rYJK_c-IW*iqyhpJZA=Zwv|c~EwA8zBQD6PHj80z)}g{X-*jQG!02C|nW2Z(Amh5H7{c!M>SqY*C@o-WxH;1Z35ysjQidPp7Sd;Pz=SYXM&H0czNZVOpd9n`n<sx>qUBHz~#T@I6ZyZ_ba=h8{n9P1PfqM-EdVA5e_X3`BM(k>F_)J!&8#{I`D#zOX9zPL7u&+<&nk*cS5bTV$saQ+DmeX{RjV!5$0bpqrAPx1m#rw^tKA!_mb%8A-oLXm=_{m#_p<ukhxHtH?3uY#Y%U*WZRdTVy&R-7t&;DeudhF|^8U?IISIEM%@suvT@l>?XRo-S7fZz4mBhn+4YFv7;6zQ`v(RIyA|D)<%9&NF2fBMJLfuG&l>Mzu(rZzv$wDfMcnbeE((}GM_d8g1uaCE#Zn-`z;5NyHek44^LT2pN?eF<N|h3AkbRxVW=F#X1po8fzaC{_w!Ku4BpyBR{hLcD{)d(>rk`-$b$TEZU1iEL1n9f(()3>89Z5?bWnU*kxae_mwiNSSl^ReoejgH(e_#~h2G-aJ8Ag@sLQQMhmv~8%_?T)S>|NR*YaN-_q{~^on8TK18%N5VrgP5H<W6V73%>;XFVnM;nK)-P03=5=nF9MC!#X_`KMS)I(}w5LhFko=&08{b+K%`KD_X!6#O0opd$8_3B4(N(u?og-{iq$4;Tz9L=86p@X*~ZxeEJf@W-OwIWN_#4So>h!$FTIL+rmbTR5Q4@aS)9(qN1iFHkRbvCXU2`F>r}6I=uuX<YP`{%{K*XVU-ku!6XW8!dFl-@lk_u!VtG2qz0r^o!A`TyG#FY+i2(8$-b5QWXa`>T)(T(IWA`>tw$8)vk3SIX6<Z-q{r$>Oj6I5F<t=wWUg;c~HNF<@zzVR{lyfy<m>rWJD<+)75N^yG8AYI*gAy18KZKvlZKC+gq87D~`Y%jnPk!)@7DjG6P1p!mZ3v-Rr8iI^bSWW(C17VA>Yj%tm{=keE^DWl5R|phw+8sPiGuDjwVr1|efX+nF?oON5F|)ucBw9<-4m1ZxsKhks-D+--k(N$o}ZgE+QN4&!GtP9xwUd1{zwEETT4mQ~k5RwhkWnI4o@fx0^-UT(b3TP>oWZ|(hw$OgGssmqPt=7%$^Xzf9ef~r4QCy=)sR0A|RV@_dkn=LCkc%@(YL?7ed@aUdeo}*{^1!2Z&n*uYR|NjlU@2OrJX10W*xG^;NEb?#m^7A!w_+_tqTyIv~-L{T-B_`&tLm-&qQ35}#?{CMK=a#>Bj0Q<MX|p0S+ws|!1ATDO$*G46`4f{dH#P`h6K4k0D=AZJnIyyFNMel&gRgMP$tbKfjHs{~BR+B5jiXMi?gspZJ+ny{*e$trcT?UfQlmb?Ya^8RtKJ8e30)XUbH4L2H5PPIb)D_ej{)<h6Y<S<td_d2JUQ<eVW5e&!N}~_8VFo5suUGQ44NutjjJ`19vo1oCEPLj8owU?3~!$uO%^WbKq0?(9jFu_<-Xi7YTwRwZCwYt5O-{#ex~NO+P=9Xi#J`O=gu`OqSYse=dZyyPZMq}{p8KQ{pXhjYbM*b8OlSlX0Tc%rKT)g5(N=j$R54y2*Jda57Z*r;Unu4sP^nhwQQQeQ*QK)GSluCkHX^;m<?G;O0<Aez1fEG0IDw`5=K)%c!$g=?A1Qj5aGsBQnosPhEOvA+uxTMeygPcKP7Zn_@lPCQ6>Jo2?{mAN5m_}?W{hZy4eH`W%e)_W~T;I==w-SV@>5XSF!jBxEF^J(TkuCK3e+UOF2PD0sP^pN0X)zHyzWClUf1Q9dJNWN4xBS4LjO0S!e7#MQW=Qw5aJ{g80*NVe=7tp;+SniYW9_jU`+2%!%-$M?9fgh?wNlH@Sl7!^j^(b5~Jh$`q+@5rh2joX6GqMM9+T1`9bV8p18&AuwN|&zuLEGLjQs1?%8wB>}Ov9t*)y7dqeNQZRp?5NE(p{^qyB0*h=g84;tLyJQG$MiqhvN-pd*R#BwG53INY@-A*x*l>q{()K`wT+3kiI_Pv)0=v<!IgXKD`R&}fn}#`<jpVgjGv#~5L_y)!mx$4!HFqV53FqazTz$S(#Y7rbkGZ8=`=hsv;Z6K!wtyPU$2-jRR3H9u#Eur*E`KLoxrvq{tMtIw)#?XYR0<@symU&>+Pjck*}>+-Fz^iD$x6&P+OeLnzGP^C%To?O{7q%#Dfc?(+AI_GFshuRB4Dl@O9fJ@Rpttdw5fi%Z5B82bGet|9rv>1QSYuiM7G-O?U5AS13dzu%2=MAvB^WFA3A2o4bTqyQnVbCW?%_V4OeHa6WVL)BJ2drpX-cv`q2Xe{hk1p3LaXyr2_^8N~HE>OY24vj_ErM5@+KOJ8J*#nwgL>zd1bKxL`a3kwxvow$$u&-suM?fl3ko%$G&qMqX$CaofzQ*<eN7;SWhs<+aH9+6s(Op#%{Jhnn=#+{l$YUe9HkLY(CJtE9i!{pBvD-Jr%mQ0$my4l*)B!l-|&>cR;p#npW_;ovBn8pbTc4jLl63CC*e5o%Z>A~DlRi%47#ETJMAL3Zf1Q*IKmVJawvMVC!P^`Ks>nVf>tQX=YN57jXNV*66%hz_6f3O>K~fHmj>CY8sl@>GQ4mWwg4pTPdF8p^@eK7Q|!b+`KwHcOd`H{`>YWWw-8MP#+33Mn{}E8ZrB>8r^M#nRTr(_JS}_tYmFQfuO@%QtDQ*+qs%i0-^r3`F=QveK;*hv&I9X489q*~PaP(Ogz3j6uY&IdTE3(_uKm6y$g12l&BX;Q7XMoh%K`F)0TxYY{~)R6$vH6Vf1efT&6A0omfc&bcC6dG*x5Rz=Wn4YJUHa^>A1Yf^pES{({g5ewuBZbe{Cu83_tJYz=-_Nv2fK0Umj_v{~2%v^TL%OOr3!&Z{zZvQ?b-MC8#cY8OBMlGUBoe)~p65`6YQSe1$0Sl5`y<t^80yuQD(TozPKK>g{FSxSPD@|KtVvIRn(!1$H^mq20D=U>c`B;MEyv^Xk9i#T4@d&1KM$=*WIyh*n#uTgy<RT&x*%~+~!$n0>o;6-O%ZOkun{Vr{2AfF#cz}Th@noP?><sw0m-s_b;fjHY;YVW-8R0$y{Q`bJo4}eIq9U@e34QF#`Tog_tH<;Q{%059Z0_max)b1$X1CB)kvgQ1ct?^+S(HH6F$PSDE@~qlr?eeZGo<U_;pfWF7FHaw2^T9aXKTUfQ7>km4Pg$&rgEeT&AEM;PT9Mbhk-`w4X>%*DmMBM2e2{tIZCIFOi?0@cS;?+N-CllCyF9SQ-M^Zkqr+-+}E289Yw@(42+f32fnRJm9<U(4+G;vaa^G@(!8VTGRDTY5TTYBFCH_oI>m2*;bXFtW%*M=%nxu9Sfzx;w(G2g`5I@1=ldqt?h}?ES8qGpjFD8~IJCbSs>pLi@}FX^!E6{O3%@e3E|1eX=H~VaOhN(P^9~$MpLNIBFlY7^55{Wi($&kl;5mM$JozIxT(e_EtA-=-;2>QIOUpLMYXS5UCLHMpUc|Nj+$l9%oaf6@441HFREcmD`2Q=}S3>9&3H_8{;rEivN8j)rhM!j$gf=-ZIB_lzQ!?^#CG_TW{A9Iv>RPv@!R|^=@917G9yMRouPw!N76@|soqh2|d5wTNo_YBlhg_W4W$xj}75jNmL!TzVS(yjwidPveB(hgZ#50mVks|U&vroLWsZ&9u2Q8pxE$>tpXJjj)_coI*i(g_<p02=x8;vMgIzdVWS**($C|Qezy}~-DQO_b&FTJ^y12a2R0@g-qZs}Z<{Fo6+s%h)mlYbwLHOZlV^0rzZy4ZsgRP0QZaT;}`Aicym!%G875OVr(q;apM<q{FJh|LZlEciEbs)7#R`4z`Tn4q$8`)bsKMw85&a^M)qUApqdO<CVm0ab<NYK-;S3&X2tT#mCzzY(XvNz|cNbOy;lQi(RU=jPeeAc8n+J=O9`FS0Q2{ReC48`bLc(GrOgs?S}nidc&-=hkpnUaGa1_K=m2M+}gkpc-o<LCN!a?J!wpEFDHSqCJ-KtPvB&787@1`-80&c9k;B!}4+c3rFb{N0vq3%tL<Vkn~HVYr*lc1&;uMk!K0!%VC#6;}c+ro!GO@rvdOHc;J!0!8f{XW5TcqLaj4A;llF6a_g5WOG<%mxey93AZN$X*E*bSc+l>pq$3m2O{x_<xAZwX26>!IgP?-UZ<CT)u7|e1(==}+FvFNvy<oWP1yA_JGBXoD!sq!Lz}XzP796`dF~OP?TMna)p_LVu@lj^k|4^4FhX>>tdT3{BBy?JM!d^R@*|vdj`W~W*5|{E`=U?jZ?b5^E!(ni5$;tCyNH!$ay*?assqRJfit!<nPXi<Wty;*bOAkbUzKgu^uA&;-F7ZHCRq9!ztpaS#des0U&D=?kdUeZyts>FoPaIG!qs#V|nIWE<n>Lw?jL|6EO=5ccTE~?5gtcu8V|E-oS<ZSO+p?xAnw?c`6}ZscUatUC`#7G>XP>HZY;+HIv8Sb<PqdC2%0yb`&|vtl1K*A=1mq|*rIwMf=~RIsDP|h`v5+x9bl+?#A2Z!_CXPm@0$NsJUDHBYgB&MXT$Vg0m53wJ$73m2Ct1jWenmToZ!q?4i|B%a_gc@a5dcck8y{`TnkOyEL6_ati7EDeOk`F<B8hILnoW4wVw$4Chv!i8H)u4`x}wczSb?XI@~X0E7{rcHsx(}AaJCzX8eX-Wa9-`xp<-IM&|l4f-P;4r2%7M|t&R@IJk&v|8ol+pO#Qb%_)nnPa2J27T#1J9gCtYi5Yo$x^@RF=8?vGhZxUVgpbDnf-8C{LHr(nT-m4Hi&>!mtjTVH|URJ4&G!H?AVQT*AI(#QU%IZ>uanjDP81@-fnl<yF1Lhiw)yqfb9MMs-^U$m+s1H_yn-C+a(8UpB%gY4Un{NhIOteByMm!VPl*Czs`+jiX9Ky!rw{L+ifPUG2ZZM@r$Uzq`$MFw8@#u^)(e}w581A_c5xo>*#m%Rlig}AA^y3FLeiDieq-^~W;G^QFSq36F6pkU+IwsvScyxnyKx-m%`h$Va=C>NHCXr#DrMXz;aG;Mt#N|jDgd~EANNMtc%RXxGxohW$&*X|vz;g;6Z=MbzIa8z`2j?uc{zs+aTFAhq5W%`6ocsi_S)f3CdK#}vSJ>xY9|+P)Q#-HoJ1u*QsGBMxE&$JlHU!m6VuRC$l9MZJXk>((iBiHQ)k`e)A48yy<DFggldi4)2G))fEs638Ou2zi6j3ay)Ve4a+|%Hh6GucPtlVX%^D`gi5Xlk0@%|j>z*KHmT>c&ux#0%c8D8iR+mz8MYtqj^M?j=IT8?g7qTbNtpjTP!?8}!A4pY=_Yp^+`YwOCpO#RQZ!3-Ch9c|h@5lX=I%Y-E!-n+Yf>g)Pp!-G38b9D@ne3E<0$L%7~C@YZ0iPWRKem5fa3jG7a2u%Y_fyGAl@J=}sj<ph&Fn5bnR~KC=i*f4dJTum;$@|DyD^KS75Z#z8_36(F{~!cYQ+q|Pcv+XuurAVC`*6|xU*DI&a!0fTlTG<6>7AfY>Pe!2E(1uy)rJhTJrxaYY@Bg4@RGTpmXWFy8x7z}2wvMXFeY@Sf=8YIXF$Q`%-HX+GKJ4{4EG-M|3+<*y$Lvwnrfb^6h${59L7p7e7Afo-rYTnJfmJSxb&U*Y^*S?yXqLh98srRN8CRRoh6{f@zrr{`ch&^gEOtDCPbK><c+js5pm_v)&Xo@I9Ev(&s#RB*3cw7kDYw{tvwpw56<9tpSSEIQDL<B&w&QuJu7xPQPKMaBG6vGy_2LsIK)&LG%$GJJXg01enA$1nntYDjGHsdl;R$eRo@#if4F{H48#l$Eiuv>x7+~dken+vaVeH=H}*T+v3dfkt&A8pAO5qD)-a17X4<JJPR=0e#UwnmvNvSc8->FSX}G{&P%p<nXZ1>Ou;+YN2QA$J%U8&3jCUIjsPeq5<BTPb1g~EG$Xv|=BOgwX(*Tu_X{-J5Lh@}&FS7Nj?O8Gm6ft!v^wG))t8te-KxW$MnydA9y*VH){v)V$pHf(6i6ra7{g<^{D5SVlWh**raLv6!cvV#VXoA-+0qt6zWqJxA{asVkcV#5pLM2hgPuX{8T&3nC`r~r@pb^j-RAz5c7>C_tKIVWrIBZblSLsJo+m~a-HdCvD|LeLPHYa8Py{4K~cUClP#`NN71+Q>=ng-MPdp?XVV|RL_bj$=@CFjE8{>QAzuzF*((LQPBi;L~2K}hHiblP`PQ<UExhgY<re_a?nmX&N2hkd>xosa#kzGpKu#9K@&V|-nFjes@f|7X5$FbfTAl_2kYXYW;be2i5HG#t8TVZ3^D-J&n8zLRWj)Otj;pp3pjos`}Ead0fro_OLI2YKvtrN_-3q9<mIWOQFZmwbF?Jxn!rq-KV23|n^sm&X5Zn49H%Mu1FtGE4RBo=V?$TL*D`uV^KATKj8Ab!>fcg$Kd>aUM~OgP>Z}!~oy$9i0<!KU@3xp9*(R<8Q8Fl$GI4_elI+Ao*D<c`SN)-DK`fcE?OSqcq%%T`(mg44(4<e7sKlqM-U_qGC%HouxZ1e@Sd)qerqF2Jf#vL8n^@_fBMx<fwX$oj`JKKF4)ROVCgZZYw$Ep+4vC+(Y%We-J-3O8a&C7yM%~m1k}4f1n@tO;P', c1='e8f011289ef31c3b', c2='fb4be0db5ef0f790'):
    try:
        # 完整性校验
        if hashlib.sha256(data.encode()).hexdigest()[:16] != c1:
            raise ValueError('Primary integrity check failed')
            
        # 解密过程
        stage1 = base64.b85decode(data)
        if hashlib.blake2b(stage1).hexdigest()[:16] != c2:
            raise ValueError('Secondary integrity check failed')
            
        stage2 = custom_decode(stage1)
        stage3 = zlib.decompress(stage2)
        return marshal.loads(stage3)
    except Exception as e:
        raise RuntimeError(f'Decryption failed: {str(e)}')

# 执行解密后的代码
exec(decrypt())
